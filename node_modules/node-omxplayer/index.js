'use strict';

// ----- Requires ----- //

let spawn = require('child_process').spawn;
let EventEmitter = require('events');
var StringDecoder = require('string_decoder').StringDecoder


// ----- Setup ----- //

// The permitted audio outputs, local means via the 3.5mm jack.
let ALLOWED_OUTPUTS = ['hdmi', 'local', 'both', 'alsa'];


// ----- Functions ----- //

// Creates an array of arguments to pass to omxplayer.
function buildArgs (source) {

	let args = ["-volume", 0, "-volstep", 10, "-loop", 0, source];

	return args;

}


// ----- Omx Class ----- //

function Omx (source, output, loop, initialVolume, showOsd) {

	// ----- Local Vars ----- //

	let omxplayer = new EventEmitter();
	let player = null;
	var open = false;
	omxplayer["open"] = open

	// ----- Local Functions ----- //

	// Marks player as closed.
	function updateStatus () {

		open = false;
		omxplayer["open"] = open
		omxplayer.emit('close');

	}

	// Emits an error event, with a given message.
	function emitError (message) {

		open = false;
		omxplayer.emit('error', message);

	}

	// Spawns the omxplayer process.
	function spawnPlayer (src) {

		let args = buildArgs(src);
		console.log('args for omxplayer:', args);
		let omxProcess = spawn('mplayer', args);
		open = true;
		omxplayer["open"] = open;

		var decoder = new StringDecoder('utf8')

		omxProcess.stdin.setEncoding('utf-8');
		omxProcess.on('close', updateStatus);

		omxProcess.stdout.on('data', (data) => {
			// console.log(`stdout: ${data}`)
		});



		omxProcess.stderr.on('data', (data) => {
			// console.log(`stderr: ${data}`)
		});


		omxProcess.on('error', () => {
			emitError('Problem running omxplayer, is it installed?.');
		});



		return omxProcess;

	}

	// Simulates keypress to provide control.
	function writeStdin (value) {

		if (open) {
			player.stdin.write(value);
		} else {
			throw new Error('Player is closed.');
		}

	}

	// ----- Setup ----- //

	if (source) {
		player = spawnPlayer(source);
	}

	// ----- Methods ----- //

	// Restarts omxplayer with a new source.
	omxplayer.newSource = (src) => {

		if (open) {

			player.on('close', () => { player = spawnPlayer(src); });
			player.removeListener('close', updateStatus);
			writeStdin('q');

		} else {

			player = spawnPlayer(src);

		}

	};

	omxplayer.play = () => { writeStdin('p'); };
	omxplayer.pause = () => { writeStdin('p'); };
	omxplayer.volUp = () => { writeStdin('0'); };
	omxplayer.volDown = () => { writeStdin('9'); };
	omxplayer.fastFwd = () => { writeStdin('>'); };
	omxplayer.rewind = () => { writeStdin('<'); };
	omxplayer.fwd30 =() => { writeStdin('\u001b[C'); };
	omxplayer.back30 = () => { writeStdin('\u001b[D'); };
	omxplayer.fwd600 = () => { writeStdin('\u001b[A'); };
	omxplayer.back600 = () => { writeStdin('\u001b[B'); };
	omxplayer.quit = () => { writeStdin('q'); };
	omxplayer.subtitles = () => { writeStdin('s'); };
	omxplayer.info = () => { writeStdin('z'); };
	omxplayer.incSpeed = () => { writeStdin('1'); };
	omxplayer.decSpeed = () => { writeStdin('2'); };
	omxplayer.prevChapter = () => { writeStdin('i'); };
	omxplayer.nextChapter = () => { writeStdin('o'); };
	omxplayer.prevAudio = () => { writeStdin('j'); };
	omxplayer.nextAudio = () => { writeStdin('k'); };
	omxplayer.prevSubtitle = () => { writeStdin('n'); };
	omxplayer.nextSubtitle = () => { writeStdin('m'); };
	omxplayer.decSubDelay = () => { writeStdin('d'); };
	omxplayer.incSubDelay = () => { writeStdin('f'); };

	Object.defineProperty(omxplayer, 'running', {
		get: () => { return open; }
	});

	// ----- Return Object ----- //

	return omxplayer;

}


// ----- Module Exports ----- //

module.exports = Omx;
